name: Publish Package
on:
  push:
    branches:
      - main
      - NG-7605
      - NG*
  ## restrict to path changes?
  # paths:
  #   - packages/gp-customer-storage
  release:
    types: [published]
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Publish Package
    strategy:
      matrix:
        node-version: [14.x]

    # This job runs on Linux
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          registry-url: 'https://npm.pkg.github.com'
          node-version: ${{ matrix.node-version }}
          scope: '@globalization-partners'
          always-auth: true
      - name: Add GP registry to .npmrc
        run: echo @globalization-partners:registry=https://npm.pkg.github.com/ > .npmrc
      - run: yarn config set --home "npmRegistries['https://npm.pkg.github.com'].npmAuthToken" "${{ secrets.GP_DEPLOY_KEY }}"
      # - name: Add authToken to .npmrc
      #   run: echo //npm.pkg.github.com/:_authToken=${{ secrets.GP_PERSONAL_ACCESS_TOKEN }} >> .npmrc
      - run: yarn set version berry && yarn set version 3.0.2
      - run: cat .yarnrc.yml | sed "s/PERSONAL_ACCESS_TOKEN/${{ secrets.GP_DEPLOY_KEY }}/g" > tmp && mv tmp .yarnrc.yml
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        ## yarn 2+
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        ## yarn 1
        #        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: cache files
        if: ${{ !env.ACT }}
        uses: actions/cache@v2
        id: yarn-cache
        with:
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            "${{ steps.npm-cache-dir.outputs.dir }}"
            "~/.npm"
            "~/.yarn"
            "./.yarn"
            "${{ steps.yarn-cache-dir-path.outputs.dir }}"
            "**/node_modules/"
          restore-keys: |
            ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/package-lock.json') }}
      - run: yarn add --cached
      - run: yarn test:coverage
      - uses: romeovs/lcov-reporter-action@v0.2.19
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
        env:
          CI: true
      # - name: Install Node.js dependencies
      #   uses: bahmutov/npm-install@v1
      # with:
      #   working-directory: packages/gp-customer-storage
      ## yarn 2 +
      - run: |
          yarn build
          yarn npm whoami --scope globalization-partners
          # yarn publish
          yarn workspaces foreach run publish
          curl -X POST --data-urlencode "payload={\"username\": \"git\", \"text\": \"GP Customer Service publish in ${GITHUB_REPOSITORY} completed by ${GITHUB_ACTOR} SHA ${GITHUB_SHA} click |${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} for details\", \"icon_emoji\": \":package:\"}" ${{ secrets.CUSTOMER_SERVICE_SLACK_WEBHOOK }}
        env:
          PERSONAL_ACESSS_TOKEN: ${{ secrets.GP_DEPLOY_KEY }}
          ## yarn 2+ does not allow node_auth_token
          # NODE_AUTH_TOKEN: ${{ secrets.GP_DEPLOY_KEY  }}
          YARN_NPM_AUTH_TOKEN: ${{ secrets.GP_DEPLOY_KEY }}

      # - name: login to github docker registry
      #   run: echo ${{secrets.GP_DEPLOY_KEY}} | docker login ghcr.io -u USERNAME --password-stdin
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            ghcr.io/${{ github.repository }}
      ## renable if permission set
      # - name: Build and push Docker images
      #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #   env:
      #     PERSONAL_ACESSS_TOKEN: ${{ secrets.GP_DEPLOY_KEY }}
      ## renable if aws role set
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-region: us-east-1
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     role-to-assume: arn:aws:iam::aws:policy/aws-service-role/ECRReplicationServiceRolePolicy
      #     # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
      #     role-duration-seconds: 1200
      #     role-session-name: gp-template-nodejs-service
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: gp-template-nodejs-service
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build . --build-arg PERSONAL_ACCESS_TOKEN=${{ secrets.GP_DEPLOY_KEY }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # # - name: Run CodeBuild
      # #   uses: aws-actions/aws-codebuild-run-build@v1
      # #   with:
      # #     project-name: gp-template-nodejs-service
